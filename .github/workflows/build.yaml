name: Build

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11"]
    env:
      MAIN_PYTHON_VERSION: "3.10"

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry install --no-interaction
      - name: Build cutplace package
        run: |
          poetry build
      - name: Run the test suite
        run: |
          poetry run pytest --cov=cutplace --cov-branch
      - name: Update coveralls
        if: ${{ matrix.python-version }} == $MAIN_PYTHON_VERSION
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
        run: |
          poetry run coveralls
      - name: Load cached pre-commit
        id: cached-pre-commit
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('.pre-commit-config.yaml') }}
      - name: Install pre-commit
        if: steps.cached-pre-commit.outputs.cache-hit != 'true'
        run: |
          poetry run pre-commit install --install-hooks
      - name: Check coding style
        if: ${{ matrix.python-version }} == $MAIN_PYTHON_VERSION
        run: |
          poetry run pre-commit run --all-files
