<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<book id="top-of-user-guide">
  <bookinfo>
    <title>Cutplace User Guide</title>

    <keywordset>
      <keyword>interface</keyword>

      <keyword>validate</keyword>

      <keyword>data</keyword>

      <keyword>csv</keyword>

      <keyword>fixed</keyword>

      <keyword>separated</keyword>

      <keyword>file</keyword>
    </keywordset>

    <copyright>
      <year>2009</year>

      <holder>Thomas Aglassinger</holder>
    </copyright>

    <legalnotice>
      <para>Permission is granted to copy, distribute and/or modify this
      document under the terms of the GNU Free Documentation License, Version
      1.3 or any later version published by the Free Software Foundation; with
      no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A
      copy of the license is available from <ulink
      url="http://www.gnu.org/copyleft/fdl.html">http://www.gnu.org/</ulink>.</para>
    </legalnotice>

    <releaseinfo>$Revision$</releaseinfo>

    <author>
      <firstname>Thomas</firstname>

      <surname>Aglassinger</surname>
    </author>
  </bookinfo>

  <preface id="introduction">
    <title>Introduction</title>

    <para>Cutplace is a tool to validate that data conform to an interface
    control document (IDC).</para>

    <para>Cutplace works with flat data formats using delimiters (such as CSV)
    or a fixed format. Such formats are commonly used to exchange data between
    different platforms or physically separated systems. Examples are
    exchanging data between different partner companies, providing data for
    data warehousing or other data processing involving architecturally very
    different systems like mainframes.</para>

    <para>With cutplace you can describe these data in a simple and human
    readable spreadsheets using popular applications like
    <application>Calc</application><footnote>
        <para><application>Calc</application> is part of
        <application>OpenOffice.org</application>, available from <ulink
        url="http://www.openoffice.org/">http://www.openoffice.org/</ulink>.</para>
      </footnote> or <application>Excel</application>. Unlike a lot of
    documentation these days, this description does not only describe wishful
    thinking. It acts as "executable specification" that cutplace can use to
    validate that data actually conform to it.</para>

    <para><xref linkend="figure-dataflow" /> shows how this works: The user
    authors an interface control documents, which he passes to cutplace
    together with the input data that should be validated. Cutplace checks the
    data one line after the other, one column after the other. When done, you
    end up with data that have been accepted and (hopefully none) that have
    been rejected.</para>

    <figure id="figure-dataflow">
      <title>The data flow when using cutplace</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/dataflow.png" />
        </imageobject>

        <textobject>
          <phrase>An illustration of the data flow when using
          cutplace</phrase>
        </textobject>
      </mediaobject>
    </figure>

    <para>To understand how this works in practice consider the following
    data, which are stored in a CSV file name <ulink
    url="valid_customers.csv">valid_customers.csv</ulink>:</para>

    <para>TODO: Insert table for customers.csv</para>

    <para>Apparently it contains contains customer data. Column 1 contains an
    ID for the branch the customers is assigned to, column 2 contains an ID
    for the customer, columns 3 and 4 constitute the customer name, column 5
    describes the gender and the last column contains the date of birth using
    the format DD.MM.YYYY. But instead of such an interface description in
    prose cutplace needs a more formal one, which can be found in <ulink
    url="icd_customers.csv">icd_customers.csv</ulink>.</para>

    <para>TODO: insert table for ids_customers.csv</para>

    <para>Actually the description can be written in a spreadsheet application
    and later on be exported to CSV. This allows to make the specification
    easier to read by using formatting. See <ulink
    url="icd_customers.ods">icd_customers.ods</ulink> respectively <ulink
    url="icd_customers.xls">icd_customers.xls</ulink> for how this might
    look.</para>

    <para>Now that we both have an IDC and data, cutplace can finally work its
    magic. Running</para>

    <para><userinput>cutplace icd_customers.csv
    customders.csv</userinput></para>

    <para>will confirm that all the data are valid.</para>

    <para>But let's try again with some broken data. Consider <ulink
    url="broken_customers.csv">broken_customers.csv</ulink>:</para>

    <para>TODO: insert table for broken_customers.csv</para>

    <para>Running</para>

    <para><userinput>cutplace icd_customers.csv
    broken_customders.csv</userinput></para>

    <para>This time the output contains several error messages:</para>

    <literallayout>ERROR:cutplace:rejected: ['12345', '92', 'Bill', 'Carter', 'male', '05.04.1953']
ERROR:cutplace:  field 'branch_id': value '12345' must match regular expression: '38\\d\\d\\d'
ERROR:cutplace:rejected: ['38111', 'XX', 'Sue', 'Brown', 'female', '08.02.1962']
ERROR:cutplace:  field 'customer_id': value must be an integer number: 'XX'
ERROR:cutplace:rejected: ['38088', '83', 'Rose', 'Baker', 'female', '30.02.1994']
ERROR:cutplace:  field 'date_of_birth': date must match format DD.MM.YYYY (%d.%m.%Y) but is: 30.02.1994 (day is out of range for month)
</literallayout>

    <para>This concludes the little example to demonstrate what cutplace can
    do.</para>

    <para>To sum it up: benefits of using cutplace are:</para>

    <itemizedlist>
      <listitem>
        <para>Data related interface specifications and associated software
        are easy to keep in sync.</para>
      </listitem>

      <listitem>
        <para>Consistent, human readable and still executable description of
        interfaces.</para>
      </listitem>

      <listitem>
        <para>Include domain experts with basic technical skills in your
        interface related requirement engineering. Descriptions for cutplace
        are fairly legible compared to BNF, XML schemes or validation scripts
        written in awk or Perl.</para>
      </listitem>

      <listitem>
        <para>Easy integration in automatic regression test suits to quickly
        detect and fix possible violations, in particular during update
        cycles.</para>
      </listitem>

      <listitem>
        <para>Easy validation of periodically delivered data during
        production, where experience shows that certain vendors tend to
        occasionally change formats without notice.</para>
      </listitem>

      <listitem>
        <para>Free availability for everyone. Use cutplace together with
        partner companies and external data vendors.</para>
      </listitem>
    </itemizedlist>

    <para>There are also limitations which might render cutplace unfit for
    your purposes:</para>

    <itemizedlist>
      <listitem>
        <para>Cutplace can only validate tabular data. It can not validate
        hierarchically structured formats such as XML, EDIFACT, <ulink
        url="http://www.hl7.org/">HL7</ulink>, <ulink
        url="http://en.wikipedia.org/wiki/Interchange_File_Format">IFF</ulink>
        and similar. For these other tools exist, for example XML validators
        where a schema or document type definition (DTD) can describe an
        interface.</para>
      </listitem>

      <listitem>
        <para>Conditional data fields where the field format depends on
        previous fields are not supported.</para>
      </listitem>
    </itemizedlist>

    <para>The remainder of this user guide is organized as follows:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="installation" /> describes the requirements for
        running cutplace and how to install it.</para>
      </listitem>

      <listitem>
        <para><xref lang="" linkend="writing-an-icd" /> explains how to write
        interface control documents.</para>
      </listitem>

      <listitem>
        <para><xref linkend="command-line-usage" /> describes how to use
        cutplace from the command line, in particular for validating
        data.</para>
      </listitem>

      <listitem>
        <para><xref linkend="development" /> is mostly interesting for people
        who want to extend cutplace for their own purpose or contribute to it.
        It explains how to obtain the source code, how work with it and share
        your results.</para>
      </listitem>

      <listitem>
        <para><xref linkend="support" /> gives an overview on the resources
        available to get support in case you encounter problems or want to
        share your experience with cutplace.</para>
      </listitem>

      <listitem>
        <para><xref linkend="changes" /> describes improvements compared to
        earlier versions.</para>
      </listitem>
    </itemizedlist>

    <para>The most current version of this user guide should always be
    available from the cutplace homepage at <ulink
    url="http://cutplace.sourceforge.net/">http://cutplace.sourceforge.net</ulink>.</para>
  </preface>

  <chapter id="installation">
    <title>Installation</title>

    <para>This chapter describes how to install the cutplace command line
    application and what you need to run it.</para>

    <section>
      <title>Requirements</title>

      <para>In order to run cutplace you need Python 2.5 or later, available
      from <ulink url="http://www.python.org/">http://www.python.org/</ulink>
      for many platforms. To check if Python is already installed, run:</para>

      <para><userinput>python --version</userinput></para>

      <para>In case Python is installed, you should see an output like the
      following (the version number may vary):</para>

      <para><computeroutput>Python 2.5.1</computeroutput></para>

      <para>Other than that, there are no special software requirements for
      cutplace. Hardware wise, any reasonably modern computer should easily
      meet the demands of cutplace. Memory usage depends on the amount of data
      you process, 256 MB of memory should be more than enough even for large
      datasets.</para>
    </section>

    <section id="download">
      <title>Install using PyPI</title>

      <para>Cutplace can be downloaded from <ulink
      url="http://pypi.python.org/pypi">PyPI</ulink>, the Python Package
      Index.</para>

      <para>TODO: Actually upload to PyPI and describe download and
      installation</para>
    </section>

    <section>
      <title>Install using the Subversion repository</title>

      <para>In case you prefer to install cutplace directly from the source,
      you can use its subversion repository as described in <xref
      linkend="development" />.</para>
    </section>
  </chapter>

  <chapter id="writing-an-icd">
    <title>Writing an Interface Control Document</title>

    <para>This chapter describes how to ... TODO: introduction &amp;
    overview.</para>

    <section>
      <title>Parts of an ICD</title>

      <para>ICD's for cutplace focus on the data specific parts and hence only
      describe:</para>

      <orderedlist>
        <listitem>
          <para>The Data format: The general format for data files, such as
          line separator, character encoding, quote character and so on. These
          properties concern the whole file and each data item in it.</para>
        </listitem>

        <listitem>
          <para>Fields:</para>
        </listitem>

        <listitem>
          <para>Optional Constraints, which are rules that have to be met
          across the whole document or several fields. For example, a customer
          ID is supposed to be unique and therefor must occur only once within
          a file.</para>
        </listitem>

        <listitem>
          <para>Comments are intended for human readers. Cutplace does not
          process them. Typically they describing the meaning of things or the
          motivation for certain decisions. Another use is the description the
          source of certain data items to simplify error analysis.</para>
        </listitem>
      </orderedlist>

      <para>This means that for cutplace to be applicable, the data of your
      interface have to fit in a table with each column always containing the
      same kind of value.</para>

      <para>TODO: elaborate</para>
    </section>

    <section>
      <title>Data formats</title>

      <para>The data format describes general properties of the input. Here is
      an example:</para>

      <table>
        <title>Example data format</title>

        <tgroup cols="3">
          <thead>
            <row>
              <entry></entry>

              <entry>Property</entry>

              <entry>Value</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>F</entry>

              <entry>Format</entry>

              <entry>CSV</entry>
            </row>

            <row>
              <entry>F</entry>

              <entry>Encoding</entry>

              <entry>ISO-8859-1</entry>
            </row>

            <row>
              <entry>F</entry>

              <entry>Line delimiter</entry>

              <entry>LF</entry>
            </row>

            <row>
              <entry>F</entry>

              <entry>Item delimiter</entry>

              <entry>,</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>This basically says that the data are provided as comma separated
      values (CSV) and the character encoding is ISO-8859-1 (also known as
      Latin-1). Rows are separated using linefeed characters (ASCII code 10)
      and columns are separated using a comma (",").</para>

      <para>The remainder of this section describes the supported formats and
      available properties for them.</para>

      <section>
        <title>Delimited data</title>

        <para>For data, both lines and columns are delimited by certain
        characters.</para>

        <table>
          <title>Example for delimited data using visible ASCII characters and
          Cyrillic (Unicode 0x0400-0x4ff)</title>

          <tgroup cols="3">
            <thead>
              <row>
                <entry></entry>

                <entry>Property</entry>

                <entry>Value</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>F</entry>

                <entry>Format</entry>

                <entry>Delimited</entry>
              </row>

              <row>
                <entry>F</entry>

                <entry>Encoding</entry>

                <entry>UTF-8</entry>
              </row>

              <row>
                <entry>F</entry>

                <entry>Line delimiter</entry>

                <entry>CRLF</entry>
              </row>

              <row>
                <entry>F</entry>

                <entry>Item delimiter</entry>

                <entry>,</entry>
              </row>

              <row>
                <entry>F</entry>

                <entry>Quote character</entry>

                <entry>"</entry>
              </row>

              <row>
                <entry>F</entry>

                <entry>Escape character</entry>

                <entry>"</entry>
              </row>

              <row>
                <entry>F</entry>

                <entry>Allowed characters</entry>

                <entry>32...128, 1024...1280</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>In case Format is Delimited, the following properties have to be
        specified:</para>

        <variablelist>
          <varlistentry>
            <term>Encoding</term>

            <listitem>
              <para>The character encoding. The most common values will be
              ASCII, ISO-8859-1 (for many western countries), UTF-8 (for
              Unicode), CP-850 (used by MS DOS in many western
              countries).</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Line delimiter</term>

            <listitem>
              <para>Thus describes which character or character sequence is
              used to mark the end of a line. Possible values are:</para>

              <itemizedlist>
                <listitem>
                  <para>CR - "carriage return", ASCII code 13, used by Mac OS
                  Classic.</para>
                </listitem>

                <listitem>
                  <para>LF - "line feed", ASCII code 10, used by Unix based
                  platforms and others, for example Mac OS X, Linux, Solaris
                  BSD-variants and Amiga OS.</para>
                </listitem>

                <listitem>
                  <para>CRLF - "carriage return linefeed", two characters with
                  ASCII code 13 and 10, used for example by Windows and MS
                  DOS.</para>
                </listitem>

                <listitem>
                  <para>Any - Do an analysis of the input and automatically
                  choose the line delimiter from it based on the one used most
                  often with the first few lines. Note that this still
                  requires that the line delimiter is used consistently, using
                  for example CR for some lines and LF for others is not
                  allowed.</para>
                </listitem>
              </itemizedlist>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Item delimiter</term>

            <listitem>
              <para>The character used to separated data items from each
              other, for example: comma (,), semicolon (;), colon (:).</para>

              <para>TODO: How to specify tab?</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Quote character</term>

            <listitem>
              <para>The character used to surround items with that contain
              delimiters or while space, for example double quote (") or
              single quote (').</para>

              <para>TODO: How to specify "no quoting"?</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Escape character</term>

            <listitem>
              <para>The escape character necessary to use the quote character
              in item values. Possible values are: double quote (").</para>

              <para>TODO: Consider supporting backslash (\) for C-like
              escapes</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Allowed characters</term>

            <listitem>
              <para>This is a comma separated list or characters or character
              ranges allowed for the item text.</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para></para>
      </section>

      <section>
        <title>CSV data</title>

        <para>CSV data are delimited data too, but most properties already
        have default values you do not need to specify unless you want to use
        other values.</para>

        <table>
          <title>Minimal example for CSV data</title>

          <tgroup cols="3">
            <thead>
              <row>
                <entry></entry>

                <entry>Property</entry>

                <entry>Value</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>F</entry>

                <entry>Format</entry>

                <entry>CSV</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>This is the same as:</para>

        <table>
          <title>Example for CSV data with default values spelled out</title>

          <tgroup cols="3">
            <thead>
              <row>
                <entry></entry>

                <entry>Property</entry>

                <entry>Value</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>F</entry>

                <entry>Format</entry>

                <entry>CSV</entry>
              </row>

              <row>
                <entry>F</entry>

                <entry>Encoding</entry>

                <entry>ASCII</entry>
              </row>

              <row>
                <entry>F</entry>

                <entry>Line delimiter</entry>

                <entry>Any</entry>
              </row>

              <row>
                <entry>F</entry>

                <entry>Item delimiter</entry>

                <entry>,</entry>
              </row>

              <row>
                <entry>F</entry>

                <entry>Quote character</entry>

                <entry>"</entry>
              </row>

              <row>
                <entry>F</entry>

                <entry>Escape character</entry>

                <entry>"</entry>
              </row>

              <row>
                <entry>F</entry>

                <entry>Allowed characters</entry>

                <entry>0...</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>Many of these values will be fine for all practical purpose.
        Most frequently "Encoding" and "Item delimiter" might have to be
        adjusted.</para>

        <table>
          <title>Example for CSV data common in many European regions</title>

          <tgroup cols="3">
            <thead>
              <row>
                <entry></entry>

                <entry>Property</entry>

                <entry>Value</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>F</entry>

                <entry>Format</entry>

                <entry>CSV</entry>
              </row>

              <row>
                <entry>F</entry>

                <entry>Encoding</entry>

                <entry>ISO-8859-1</entry>
              </row>

              <row>
                <entry>F</entry>

                <entry>Item delimiter</entry>

                <entry>;</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>

      <section>
        <title>Fixed data</title>

        <para>FIXME: Fixed data are not supported yet.</para>

        <para>Fixed data reserve a certain number of characters per field. No
        delimiters are necessary.</para>

        <table>
          <title>Example for fixed data format</title>

          <tgroup cols="3">
            <thead>
              <row>
                <entry></entry>

                <entry>Property</entry>

                <entry>Value</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>F</entry>

                <entry>Format</entry>

                <entry>Fixed</entry>
              </row>

              <row>
                <entry>F</entry>

                <entry>Encoding</entry>

                <entry>ISO-8859-1</entry>
              </row>

              <row>
                <entry>F</entry>

                <entry>Line delimiter</entry>

                <entry>LF</entry>
              </row>

              <row>
                <entry>F</entry>

                <entry>Allowed characters</entry>

                <entry>0...</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para></para>
      </section>
    </section>

    <section>
      <title>Field formats</title>

      <para>This section describes the different field formats.</para>

      <section>
        <title>Overview</title>

        <para>The field format section of the ICD contains rows wit the
        following columns:</para>

        <orderedlist>
          <listitem>
            <para>The letter "F" to indicate that the remaining columns
            describe a field format.</para>
          </listitem>

          <listitem>
            <para>The name of the field. It must start with an ASCII letter
            and continue with letters, numbers and underscores (_), for
            example <varname>customer_id</varname>.</para>
          </listitem>

          <listitem>
            <para>The type of the field, for example <type>Text</type>,
            <type>Integer</type>, <type>DateTime</type> and others. Refer to
            the sections below for detailed descriptions of these
            types.</para>
          </listitem>

          <listitem>
            <para>A flag that indicates if the field is allowed to be empty.
            "X" means that the field can be empty, no text means that the
            field always must contain at least some data.</para>
          </listitem>

          <listitem>
            <para>The length of the field in characters.</para>

            <para>For separated formats, this is optional and takes the form
            <varname>lower_limit</varname> ... <varname>upper_limit</varname>.
            For example, <userinput>10...20</userinput> means that values in
            this field must contains at least 10 characters and at most 20. It
            is also possible to specify only a lower or upper limit, for
            example <userinput>10...</userinput> means at least 10 characters
            ans ...20 means at least 20 characters. Furthermore the length can
            be a single number with any ..., meaning that the length must
            match this number exactly.</para>

            <para>For fixed formats, this column takes a number that specifies
            the exact length of the field, for example 50.</para>
          </listitem>

          <listitem>
            <para>A rule depending on the type further describing the field.
            For example, a field of type DateTime requires an exact date or
            time format such as DD.MM.YYYY.</para>
          </listitem>

          <listitem>
            <para>The remaining columns are not parsed by cutplace and can
            contain any text you like, for example a description of the
            meaning of the field, details where the data originate from, or
            example values.</para>
          </listitem>
        </orderedlist>

        <table id="examples-for-various-field-formats">
          <title>Simple examples for various field formats</title>

          <tgroup cols="6">
            <thead>
              <row>
                <entry></entry>

                <entry>Name</entry>

                <entry>Type</entry>

                <entry>Empty</entry>

                <entry>Length</entry>

                <entry>Rule</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>F</entry>

                <entry>customer_id</entry>

                <entry>Integer</entry>

                <entry></entry>

                <entry></entry>

                <entry>1...999999</entry>
              </row>

              <row>
                <entry>F</entry>

                <entry>surname</entry>

                <entry>Text</entry>

                <entry></entry>

                <entry>1...60</entry>

                <entry></entry>
              </row>

              <row>
                <entry>F</entry>

                <entry>date_of_birth</entry>

                <entry>DateTime</entry>

                <entry>X</entry>

                <entry></entry>

                <entry>YYYY-MM-DD</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>

      <section>
        <title>Text</title>

        <para>The Text type describes a field that can contain any letters,
        digits and other characters.</para>

        <table id="examples-for-text-fields">
          <title>Examples for Text fields</title>

          <tgroup cols="6">
            <thead>
              <row>
                <entry></entry>

                <entry>Name</entry>

                <entry>Type</entry>

                <entry>Empty</entry>

                <entry>Length</entry>

                <entry>Rule</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>F</entry>

                <entry>surname</entry>

                <entry>Text</entry>

                <entry></entry>

                <entry>1..60</entry>

                <entry></entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>

      <section>
        <title>Integer</title>

        <para>The Integer type describes a field that can contain decimal
        numbers without any fractional part.</para>

        <table id="examples-for-integer-fields">
          <title>Examples for Integer fields</title>

          <tgroup cols="6">
            <thead>
              <row>
                <entry></entry>

                <entry>Name</entry>

                <entry>Type</entry>

                <entry>Empty</entry>

                <entry>Length</entry>

                <entry>Rule</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>F</entry>

                <entry>height</entry>

                <entry>Integer</entry>

                <entry></entry>

                <entry></entry>

                <entry>8848</entry>
              </row>

              <row>
                <entry>F</entry>

                <entry>weight</entry>

                <entry>Integer</entry>

                <entry></entry>

                <entry>0...</entry>

                <entry>1382</entry>
              </row>

              <row>
                <entry>F</entry>

                <entry>id</entry>

                <entry>Integer</entry>

                <entry></entry>

                <entry>5</entry>

                <entry>1...99999</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>

      <section>
        <title>Choice</title>

        <para>The Choice type describes a field that can contain on value out
        of a set of possibly values.</para>

        <table id="examples-for-choice-fields">
          <title>Examples for Choice fields</title>

          <tgroup cols="6">
            <thead>
              <row>
                <entry></entry>

                <entry>Name</entry>

                <entry>Type</entry>

                <entry>Empty</entry>

                <entry>Length</entry>

                <entry>Rule</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>F</entry>

                <entry>color</entry>

                <entry>Choice</entry>

                <entry></entry>

                <entry></entry>

                <entry>red, green, blue</entry>
              </row>

              <row>
                <entry>F</entry>

                <entry>iso_gender</entry>

                <entry>Choice</entry>

                <entry></entry>

                <entry></entry>

                <entry>male, female, unknown, other</entry>
              </row>

              <row>
                <entry>F</entry>

                <entry>department</entry>

                <entry>Choice</entry>

                <entry></entry>

                <entry></entry>

                <entry>accounting, development, sales, shipping</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>

      <section>
        <title>DateTime</title>

        <para>The DateTime type describes a field that can contain a date
        and/or time in a specified format.</para>

        <para>To describe a date, use the following place holders:</para>

        <itemizedlist>
          <listitem>
            <para>DD: the day (1...31)</para>
          </listitem>

          <listitem>
            <para>MM: the numeric month (1..12)</para>
          </listitem>

          <listitem>
            <para>YYYY: the year including the century (1...9999)</para>
          </listitem>

          <listitem>
            <para>YY: the year without century</para>
          </listitem>
        </itemizedlist>

        <para>To describe a time, use the following place holders:</para>

        <itemizedlist>
          <listitem>
            <para>hh: hours (0..23)</para>
          </listitem>

          <listitem>
            <para>mm: minutes (0..59)</para>
          </listitem>

          <listitem>
            <para>ss: seconds (0..61). Note that 60 and 61 are valid values
            because of possible leap seconds.</para>
          </listitem>
        </itemizedlist>

        <para>Leading zeros are ignored. Any other characters will be
        interpreted as separators and have to appear in the data as
        specified.</para>

        <table id="examples-for-datetime-fields">
          <title>Examples for DateTime fields</title>

          <tgroup cols="6">
            <thead>
              <row>
                <entry></entry>

                <entry>Name</entry>

                <entry>Type</entry>

                <entry>Empty</entry>

                <entry>Length</entry>

                <entry>Rule</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>F</entry>

                <entry>date_of_birth</entry>

                <entry>DateTime</entry>

                <entry></entry>

                <entry></entry>

                <entry>YYYY-MM-DD</entry>
              </row>

              <row>
                <entry>F</entry>

                <entry>time_of_arrival</entry>

                <entry>DateTime</entry>

                <entry></entry>

                <entry></entry>

                <entry>hh:mm</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>

      <section>
        <title>Pattern</title>

        <para>The Pattern type is similar to the Text type but additionally
        allows to use special characters as place holders:</para>

        <itemizedlist>
          <listitem>
            <para>"?" mean "exactly 1 character".</para>
          </listitem>

          <listitem>
            <para>"*" means "none or any characters"</para>
          </listitem>
        </itemizedlist>

        <table id="examples-for-pattern-fields">
          <title>Examples for Pattern fields</title>

          <tgroup cols="6">
            <thead>
              <row>
                <entry></entry>

                <entry>Name</entry>

                <entry>Type</entry>

                <entry>Empty</entry>

                <entry>Length</entry>

                <entry>Rule</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>F</entry>

                <entry>dos_filename</entry>

                <entry>Pattern</entry>

                <entry></entry>

                <entry>1...12</entry>

                <entry>?*.*</entry>
              </row>

              <row>
                <entry>F</entry>

                <entry>branch_id</entry>

                <entry>Pattern</entry>

                <entry></entry>

                <entry></entry>

                <entry>B???-????-?*</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>

      <section>
        <title>RegEx</title>

        <para>The RegEx type is similar to the Pattern type but allows more
        sophisticated place holders by describing a regular expression. The
        syntax available is described in the chapter on "Regular expression
        operations" of the Python documentation, available from <ulink
        url="http://docs.python.org/library/re.html">http://docs.python.org/library/re.html</ulink>.</para>

        <table id="examples-for-regex-fields">
          <title>Examples for RegEx fields</title>

          <tgroup cols="6">
            <thead>
              <row>
                <entry></entry>

                <entry>Name</entry>

                <entry>Type</entry>

                <entry>Empty</entry>

                <entry>Length</entry>

                <entry>Rule</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>F</entry>

                <entry>email</entry>

                <entry>RegEx</entry>

                <entry></entry>

                <entry></entry>

                <entry>^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$<footnote>
                    <para>Validate that field value is an email address as
                    described in "<ulink
                    url="http://www.regular-expressions.info/email.html">how
                    to find or validate an email address</ulink>".</para>
                  </footnote></entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>
    </section>

    <section>
      <title>Constraints</title>

      <para>Constraints are rules that cannot be expressed easily with the
      rules available for data formats and field formats. Typically
      constraints cover need data items or rows to check if they are
      met.</para>

      <para>TODO: Describe general format.</para>

      <section>
        <title>IsUnique</title>

        <para>TODO: Describe.</para>
      </section>
    </section>

    <section>
      <title>Comments</title>

      <para>Comments can show up in the ICD at any line or column cutplace
      does not parse. In particular constitutes:</para>

      <itemizedlist>
        <listitem>
          <para>Lines that have an empty first column. Remember that a D means
          details about the data format, F about the field format and C
          describes constraints.</para>
        </listitem>

        <listitem>
          <para>Columns that are past the columns needed by cutplace. For
          example, in a line describing a data format property, cutplace
          parses only the first three (D, Property name, value). Because of
          that you can write any text starting with column number 4.</para>
        </listitem>
      </itemizedlist>

      <para></para>
    </section>
  </chapter>

  <chapter id="command-line-usage">
    <title>Command line usage</title>

    <para>This chapter describes how to use cutplace from the command line. It
    assumes the user already opened a console window (for example
    <application>Terminal.app</application> on Mac OS X,
    <application>xterm</application> on Linux or
    <application>cmd.exe</application> on Windows) and is ready to enter
    commands in it.</para>

    <section id="command-line-information">
      <title>Show help and other information</title>

      <para>To read a short description of all options available for cutplace,
      run:</para>

      <para><userinput>cutplace --help</userinput></para>

      <para>To find out which characters encodings cutplace supports,
      run:</para>

      <para><userinput>cutplace --listencodings</userinput></para>

      <para>To learn which version of cutplace you are using, run:</para>

      <para><userinput>cutplace --version</userinput></para>

      <para>Note that this also prints the version of Python used and a few
      details on the platform running on. This is particular useful in case
      you intend to report bugs as described in <xref
      linkend="support" />.</para>
    </section>

    <section id="command-line-validate-icd">
      <title>Validate an ICD</title>

      <para>To validate that an ICD is syntactically and semantically correct,
      simply run cutplace with only the path of the ICD as option. For
      example, an ICD stored in CSV format and named
      <filename>customer_icd.csv</filename> can be validated by
      running:</para>

      <para><userinput>cutplace customer_icd.csv</userinput></para>

      <para>Possible errors show up in the console and result in an exit code
      of 1.</para>

      <para>In case the ICD is in good shape, no error messages appear and the
      exit code is 0.</para>
    </section>

    <section id="command-line-validate-data">
      <title>Validate that a data file conforms to an ICD</title>

      <para>To validate that a data file conforms to an ICD, pass the path of
      the ICD and the data file. For example using the same ICD as in the
      previous section to validate a data file containing customers stored in
      customers.csv, run:</para>

      <para><userinput>cutplace customer_icd.csv
      customers.csv</userinput></para>

      <para>To validate several data files against the same ICD, simply pass
      them all. For example:.</para>

      <para><userinput>cutplace customer_icd.csv customers_east.csv
      customers_north.csv customers_south.csv
      customers_west.csv</userinput></para>

      <para>In case the data do not conform to the ICD, error messages show up
      in the console.</para>
    </section>

    <section id="command-line-errors">
      <title>Dealing with errors</title>

      <para>Roughly speaking cutplace can encounter the following kinds of
      errors when validating data:</para>

      <itemizedlist>
        <listitem>
          <para>Errors that prevent cutplace from validating the data at all,
          such as non existent data files, insufficient file access rights or
          broken ICD's.</para>
        </listitem>

        <listitem>
          <para>Errors in the data format that prevent it from validating the
          whole file. For example, the ICD might specify a line separator "LF"
          (linefeed) but the data file uses "CRLF" (carriage return and
          linefeed). In such a case, cutplace will stop the validation once it
          encounters the wrong separator.</para>
        </listitem>

        <listitem>
          <para>Errors in the data that violate the rules specified in the ICD
          for fields and constraints. For example, the ICD might specify that
          a field is an integer number but the data file contains letters in
          it. In such a case, cutplace will report the specific line and
          column of the field, and continue with the next one.</para>
        </listitem>
      </itemizedlist>

      <para>xxx</para>
    </section>
  </chapter>

  <chapter id="development">
    <title>Development</title>

    <para>Cutplace is open source software, so its source code is available
    for you to inspect, extend and play around with. This chapter describes
    where to get it, how to change and test the application, how to write your
    own field formats and how to contribute to the project.</para>

    <section>
      <title>Obtaining and building the source code</title>

      <para>The source code for cutplace is available via a Subversion
      repository from
      https://cutplace.svn.sourceforge.net/svnroot/cutplace/trunk. You can
      browse it at <ulink
      url="http://cutplace.svn.sourceforge.net/viewvc/cutplace/">http://cutplace.svn.sourceforge.net/viewvc/cutplace/</ulink>.</para>

      <para>The source code consists of:</para>

      <itemizedlist>
        <listitem>
          <para><filename>build.xml</filename> is the project file for the
          build tool <ulink url="http://ant.apache.org/">ant</ulink></para>
        </listitem>

        <listitem>
          <para><filename>version.xml</filename> contains basic version
          information</para>
        </listitem>

        <listitem>
          <para><filename>source/cutplace/*.py</filename> are the Python
          modules for cutplace</para>
        </listitem>

        <listitem>
          <para><filename>source/cutplace/test_*.py</filename> are test cases
          for unittest.</para>
        </listitem>

        <listitem>
          <para><filename>source/site</filename> is the source code needed to
          build the cutplace website</para>
        </listitem>

        <listitem>
          <para><filename>source/site/user-guide.xml</filename> is the
          Documentation written in <ulink
          url="http://www.docbook.org/">DocBook XML</ulink></para>
        </listitem>

        <listitem>
          <para><filename>source/xml/*.xml</filename> are XSL transformations
          for source code generated from
          <filename>version.xml</filename></para>
        </listitem>

        <listitem>
          <para><filename>tests/*</filename> contains test data; use for
          example <ulink
          url="http://www.openoffice.org/">OpenOffice.org</ulink>'s Calc to
          edit the <filename>*.ods</filename> and <filename>*.csv</filename>
          files</para>
        </listitem>

        <listitem>
          <para><filename>tests/input/*</filename> are test data used by the
          unittest tests in
          <filename>source/cutplace/test_*.py</filename></para>
        </listitem>

        <listitem>
          <para><filename>.project</filename> and
          <filename>.pydevproject</filename> for use with <ulink
          url="http://www.eclipse.org/">Eclipse</ulink> and <ulink
          url="http://pydev.sourceforge.net/">PyDev</ulink>.</para>
        </listitem>
      </itemizedlist>

      <para>If Eclipse and PyDev are your developer environment of choice, you
      can check out the repository directly from Eclipse using <menuchoice>
          <guimenu>File</guimenu>

          <guisubmenu>New</guisubmenu>

          <guimenuitem>Other...</guimenuitem>
        </menuchoice> and select <menuchoice>
          <guimenu>SVN</guimenu>

          <guimenuitem>Checkout projects from SVN</guimenuitem>
        </menuchoice>. After that, you should open
      <filename>build.xml</filename> and run the ant target "setup".</para>

      <para>If you prefer the command line, you need any Subversion client and
      the build tool ant. Some parts of the code are generated using XSL and
      ant's <code>&lt;xslt&gt;</code> task, so simply using distutils alone
      won't suffice.</para>

      <para>To check out the current version using the standard Subversion
      command line client, run:</para>

      <para><userinput>svn checkout
      https://cutplace.svn.sourceforge.net/svnroot/cutplace/trunk
      cutplace</userinput></para>

      <para>After the checkout, change to the cutplace folder and execute the
      ant target "setup":</para>

      <para><literallayout><userinput>cd cutplace
ant setup</userinput></literallayout></para>

      <para>The output should look something like this (replace "..." with
      your local project path):</para>

      <para><literallayout><computeroutput>Buildfile: build.xml
setup:
    [untar] Expanding: .../cutplace/external/dtds.tar.bz2 into .../cutplace
    [untar] Expanding: .../cutplace/external/docbook-xsl.tar.bz2 into .../cutplace
BUILD SUCCESSFUL Total time: 3 seconds </computeroutput></literallayout></para>

      <para>To just build a binary distribution, run:</para>

      <para><userinput>ant bdist</userinput></para>

      <para>The output should look something like this:</para>

      <literallayout><computeroutput>Buildfile: build.xml

version:
     [xslt] Processing .../cutplace/version.xml to .../cutplace/source/cutplace/version.py
     [xslt] Loading stylesheet .../cutplace/source/xml/version-py.xsl
     [xslt] Processing .../cutplace/version.xml to .../cutplace/setup.py
     [xslt] Loading stylesheet .../cutplace/source/xml/version-setup-py.xsl

user-guide:
     [xslt] Processing .../cutplace/source/site/user-guide.xml to .../cutplace/site/index.html
     [xslt] Loading stylesheet .../cutplace/docbook-xsl/xhtml/docbook.xsl

bdist:
     [exec] running bdist
     [exec] running bdist_dumb
     [exec] running build
     [exec] running build_py
     [exec] creating build
     [exec] creating build/lib
     [exec] creating build/lib/cutplace
     [exec] ...

BUILD SUCCESSFUL</computeroutput>
</literallayout>

      <para>To run all test cases:</para>

      <para><userinput>ant test</userinput></para>

      <para>To remove files generated during the build process:</para>

      <para><userinput>ant clean</userinput></para>

      <para></para>
    </section>

    <section>
      <title>Writing field formats</title>

      <para>Cutplace already ships with several field formats that should
      cover most needs. If however you have some very special requirements,
      you can write your own formats.</para>

      <para>The easiest way to do so is by adding your format to
      <filename>source/cutplace/fields.py</filename>. Simply inherit from
      <classname>AbstractFieldFormat</classname> provide a constructor to
      parse the <parameter>rule</parameter> parameter. Next, implement
      <methodname>validate(self, item)</methodname> that validates that the
      text in <parameter>item</parameter> conforms to
      <parameter>rule</parameter>. If not, raise an
      <exceptionname>FieldValueError</exceptionname> with a descriptive error
      message. For examples see any of the <classname>*FieldFormat</classname>
      classes in <filename>fields.py</filename>.</para>

      <para>The drawback of this approach is that when you install a new
      version of cutplace, your changes in <filename>fields.py</filename> will
      be lost.</para>

      <para>TODO: Describe how to write a <filename>myfields.py</filename> and
      extend the Python path.</para>
    </section>

    <section>
      <title>Writing constraints</title>

      <para>TODO: Describe how to write constraints.</para>
    </section>

    <section>
      <title>Contributing source code</title>

      <para>In case you fixed any bugs or added improvements to cutplace, feel
      free to contribute your changes.</para>

      <para>The easiest way to do this is by submitting them to the project's
      patch tracker at <ulink
      url="https://sourceforge.net/tracker/?group_id=256054&amp;atid=1126965">https://sourceforge.net/tracker/?group_id=256054&amp;atid=1126965</ulink>.</para>
    </section>

    <section>
      <title>Developer notes</title>

      <para>This section collects a few final notes interesting for
      developers, especially for release management.</para>

      <para>When using Mac OS X and Python 2.5 from MacPorts, getting
      setuptools to work is no easy feat. when you try to run</para>

      <para><userinput>sudo setuptools-x.y.z-py2.5.egg</userinput></para>

      <para>and get</para>

      <para><computeroutput>zipimport.ZipImportError: can't decompress data;
      zlib not available</computeroutput></para>

      <para>then you need to install py25-zlib. In case you get</para>

      <para><computeroutput>ImportError: No module named
      _md5</computeroutput></para>

      <para>then you need to install py25-hashlib.</para>

      <section>
        <title>Getting setuptools to work</title>

        <para>When using Mac OS X and Python 2.5 from MacPorts, getting
        setuptools to work is no easy feat. when you try to run</para>

        <para><userinput>sudo setuptools-x.y.z-py2.5.egg</userinput></para>

        <para>and get</para>

        <para><computeroutput>zipimport.ZipImportError: can't decompress data;
        zlib not available</computeroutput></para>

        <para>then you need to install <package>py25-zlib</package>. In case
        you get</para>

        <para><computeroutput>ImportError: No module named
        _md5</computeroutput></para>

        <para>then you need to install <package>py25-hashlib</package>.</para>
      </section>

      <section>
        <title>Add a release tag</title>

        <para>When publishing a new release, a tag should be added to the
        repository. This can be done using the following template:</para>

        <para><userinput>svn copy -m "Added tag for version 0.x.x"
        https://cutplace.svn.sourceforge.net/svnroot/cutplace/trunk
        https://cutplace.svn.sourceforge.net/svnroot/cutplace/tags/0.x.x</userinput></para>

        <para>Simply replace <userinput>0.x.x</userinput> with the current
        version number.</para>
      </section>
    </section>
  </chapter>

  <chapter id="support">
    <title>Getting support</title>

    <para>In addition to its homepage at <ulink
    url="http://cutplace.sourceforge.net/">http://cutplace.sourceforge.net/</ulink>,
    Cutplace has a project site at <ulink
    url="http://sourceforge.net/projects/cutplace/">http://sourceforge.net/projects/cutplace/</ulink>.</para>

    <para>In case you have a question about cutplace, encounter a bug you
    can't quite pin down yet, or just want to tell others about your
    experience with it, feel free to post a message to the cutplace forum at
    <ulink
    url="https://sourceforge.net/forum/forum.php?forum_id=928547">https://sourceforge.net/forum/forum.php?forum_id=928547</ulink>.</para>

    <para>In case you have a bug you can reproduce, please post it to the bug
    tracker at <ulink
    url="https://sourceforge.net/tracker/?group_id=256054&amp;atid=1126964">https://sourceforge.net/tracker/?group_id=256054&amp;atid=1126964</ulink>.
    Please include the following information:</para>

    <orderedlist>
      <listitem>
        <para>The output of running <userinput>cutplace --version</userinput>,
        which yields the version of cutplace, Python and the platform
        used.</para>
      </listitem>

      <listitem>
        <para>Necessary steps, data and command line options to reproduce the
        bug.</para>
      </listitem>
    </orderedlist>

    <para>This greatly helps in fixing bugs sooner.</para>
  </chapter>

  <chapter id="changes">
    <title>Revision history</title>

    <para>This chapter describes improvements compared to earlier versions of
    cutplace.</para>

    <section id="v0.1.0">
      <title>Version 0.1.1, 17-Mar-2009</title>

      <itemizedlist>
        <listitem>
          <para>Initial release.</para>
        </listitem>
      </itemizedlist>
    </section>
  </chapter>
</book>
