<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<book id="top-of-user-guide">
  <bookinfo>
    <title>Cutplace User Guide</title>

    <keywordset>
      <keyword>interface</keyword>

      <keyword>validate</keyword>

      <keyword>data</keyword>

      <keyword>csv</keyword>

      <keyword>fixed</keyword>

      <keyword>separated</keyword>

      <keyword>file</keyword>
    </keywordset>

    <copyright>
      <year>2009</year>

      <holder>Thomas Aglassinger</holder>
    </copyright>

    <legalnotice>
      <para>Permission is granted to copy, distribute and/or modify this
      document under the terms of the GNU Free Documentation License, Version
      1.2 or any later version published by the Free Software Foundation; with
      no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A
      copy of the license is included in the section entitled "GNU Free
      Documentation License".</para>
    </legalnotice>

    <releaseinfo>$Revision$</releaseinfo>

    <author>
      <firstname>Thomas</firstname>

      <surname>Aglassinger</surname>
    </author>
  </bookinfo>

  <preface id="introduction">
    <title>Introduction</title>

    <para>Cutplace is a tool to validate that data conform to an interface
    control document (IDC).</para>

    <para>Cutplace works with flat data formats using a separator (such as
    CSV) or a fixed format. Such formats are commonly used to exchange data
    between different platforms or physically separated systems. Examples are
    exchanging data between different partner companies, providing data for
    data warehousing or other data processing involving architecturally very
    different systems like mainframes.</para>

    <para>With cutplace you can describe these data in a simple and human
    readable spreadsheets using popular applications like
    <application>Calc</application><footnote>
        <para><application>Calc</application> is part of
        <application>OpenOffice.org</application>, available from <ulink
        url="http://www.openoffice.org/">http://www.openoffice.org/</ulink>.</para>
      </footnote> or <application>Excel</application>. Unlike a lot of
    documentation these days, this description does not only describe wishful
    thinking. It acts as "executable specification" that cutplace can use to
    validate that data actually conform to it.</para>

    <para>Benefits of using cutplace are:</para>

    <itemizedlist>
      <listitem>
        <para>Data related interface specifications and associated software
        are easy to keep in sync.</para>
      </listitem>

      <listitem>
        <para>Consistent, human readable and still executable description of
        interfaces.</para>
      </listitem>

      <listitem>
        <para>Include domain experts with basic technical skills in your
        interface related requirement engineering. Descriptions for cutplace
        are fairly legible compared to BNF, awk or perl.</para>
      </listitem>

      <listitem>
        <para>Easy integration in automatic regression test suits to quickly
        detect and fix possible violations, in particular during update
        cycles.</para>
      </listitem>

      <listitem>
        <para>Easy validation of periodically delivered data during
        production, where experience shows that certain vendors tend to
        occasionally change formats without notice.</para>
      </listitem>

      <listitem>
        <para>Free availability for everyone. Use cutplace together with
        partner companies and external data vendors.</para>
      </listitem>
    </itemizedlist>

    <para>Cutplace cannot validate hierarchically structured formats such as
    XML, EDIFACT, <ulink url="http://www.hl7.org/">HL7</ulink>, <ulink
    url="http://en.wikipedia.org/wiki/Interchange_File_Format">IFF</ulink> and
    similar. For these other tools exist, for example XML validators where a
    schema or document type definition (DTD) can describe an interface.</para>

    <para>To find out what is new in this version, see the <link
    linkend="changes">revision history</link>. For updates and support, visit
    the cutplace homepage at <ulink
    url="http://cutplace.sourceforge.net/">http://cutplace.sourceforge.net</ulink>.</para>
  </preface>

  <chapter id="installation">
    <title>Installation</title>

    <section id="download">
      <title>Using PyPI</title>

      <para>Cutplace can be downloaded from <ulink
      url="http://pypi.python.org/pypi">PyPI</ulink>, the Python Package
      Index. TODO: more info</para>
    </section>

    <section>
      <title>Using the source code repository</title>

      <para>The source code for cutplace is available via a Subversion
      repository.</para>

      <para>To check out the current version run:</para>

      <para><userinput>svn checkout http://TODO:url
      cutplace</userinput></para>

      <para>To just build a binary distribution, run:</para>

      <para><userinput>python setup.py bdist</userinput></para>

      <para>More sophisticated things can be done using ant, a Java based
      build tool popular for Java projects that can be pretty useful for
      projects in other programming languages too.</para>

      <para>To build a binary distribution just as described above, you can
      also run:</para>

      <para><userinput>ant bdist</userinput></para>

      <para>To run all test cases:</para>

      <para><userinput>ant test</userinput></para>

      <para>To remove files generated during the build process:</para>

      <para><userinput>ant clean</userinput></para>

      <para>If you also want to build the documentation:</para>

      <para><userinput>ant user-guide</userinput></para>

      <para>The source code for the user guide is written in <ulink
      url="http://www.docbook.org/">DocBook XML</ulink>.</para>
    </section>
  </chapter>

  <chapter>
    <title>Writing an Interface Control Document</title>

    <para>This chapter describes how to ... TODO: introduction &amp;
    overview.</para>

    <section>
      <title>Parts of an ICD</title>

      <para>ICD's for cutplace focus on the data specific parts and hence only
      describe:</para>

      <orderedlist>
        <listitem>
          <para>The Data format: The general format for data files, such as
          line separator, character encoding, quote character and so on. These
          properties concern the whole file and each data item in it.</para>
        </listitem>

        <listitem>
          <para>Fields:</para>
        </listitem>

        <listitem>
          <para>Optional Constraints, which are rules that have to be met
          across the whole document or several fields. For example, a customer
          ID is supposed to be unique and therefor must occur only once within
          a file.</para>
        </listitem>

        <listitem>
          <para>Comments are intended for human readers. Cutplace does not
          process them. Typically they describing the meaning of things or the
          motivation for certain decisions. Another use is the description the
          source of certain data items to simplify error analysis.</para>
        </listitem>
      </orderedlist>

      <para>This means that for cutplace to be applicable, the data of your
      interface have to fit in a table with each column always containing the
      same kind of value.</para>

      <para>xxx</para>

      <para>xxx</para>
    </section>

    <section>
      <title>Describing the data format</title>

      <para>xxx</para>
    </section>

    <section>
      <title>Describing field formats</title>

      <para>This section describes the different field formats.</para>

      <section>
        <title>Overview</title>

        <para>The field format section of the ICD contains rows wit the
        following columns:</para>

        <orderedlist>
          <listitem>
            <para>The letter "F" to indicate that the remaining columns
            describe a field format.</para>
          </listitem>

          <listitem>
            <para>The name of the field. This must start with an ASCII letter
            and continue with letters, numbers and undercores (_), for example
            <varname>customer_id</varname>.</para>
          </listitem>

          <listitem>
            <para>The type of the field, for example <type>Text</type>,
            <type>Integer</type>, <type>DateTime</type> and others. Refer to
            the sections below for detailed descriptions of these
            types.</para>
          </listitem>

          <listitem>
            <para>A flag that indicates if the field is allowed to be empty.
            "X" means that the field can be empty, no text means that the
            field always must contain at least some data.</para>
          </listitem>

          <listitem>
            <para>The length of the field in characters.</para>

            <para>For separated formats, this is optional and takes the form
            <varname>lower_limit</varname> ... <varname>upper_limit</varname>.
            For example, <userinput>10...20</userinput> means that values in
            this field must contains at least 10 characters and at most 20. It
            is also possible to specify only a lower or upper limit, for
            example <userinput>10...</userinput> means at least 10 characters
            ans ...20 means at least 20 characters. Furthermore the length can
            be a single number with any ..., meaning that the length must
            match this number exactly.</para>

            <para>For fixed formats, this column takes a number that specifies
            the exact length of the field, for example 50.</para>
          </listitem>

          <listitem>
            <para>A rule depending on the type further describing the field.
            For example, a field of type DateTime requires an exact date or
            time format such as DD.MM.YYYY.</para>
          </listitem>

          <listitem>
            <para>The remaining columns are not parsed by cutplace and can
            contain any text you like, for example a description of the
            meaning of the field, details where the data originat from, or
            example values.</para>
          </listitem>
        </orderedlist>

        <table id="examples-for-various-field-formats">
          <title>Simple examples for various field formats</title>

          <tgroup cols="6">
            <thead>
              <row>
                <entry></entry>

                <entry>Name</entry>

                <entry>Type</entry>

                <entry>Empty</entry>

                <entry>Length</entry>

                <entry>Rule</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>F</entry>

                <entry>customer_id</entry>

                <entry>Integer</entry>

                <entry></entry>

                <entry></entry>

                <entry>1...999999</entry>
              </row>

              <row>
                <entry>F</entry>

                <entry>surname</entry>

                <entry>Text</entry>

                <entry></entry>

                <entry>1...60</entry>

                <entry></entry>
              </row>

              <row>
                <entry>F</entry>

                <entry>date_of_birth</entry>

                <entry>DateTime</entry>

                <entry>X</entry>

                <entry></entry>

                <entry>YYYY-MM-DD</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>

      <section>
        <title>Text</title>

        <para>The Text type describes a field that can contain any letters,
        digits and other chraracters.</para>

        <table id="examples-for-text-fields">
          <title>Examples for Text fields</title>

          <tgroup cols="6">
            <thead>
              <row>
                <entry></entry>

                <entry>Name</entry>

                <entry>Type</entry>

                <entry>Empty</entry>

                <entry>Length</entry>

                <entry>Rule</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>F</entry>

                <entry>surname</entry>

                <entry>Text</entry>

                <entry></entry>

                <entry>1..60</entry>

                <entry></entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>

      <section>
        <title>Integer</title>

        <para>The Integer type describes a field that can contain decimal
        numbers without any fractional part.</para>

        <table id="examples-for-integer-fields">
          <title>Examples for Integer fields</title>

          <tgroup cols="6">
            <thead>
              <row>
                <entry></entry>

                <entry>Name</entry>

                <entry>Type</entry>

                <entry>Empty</entry>

                <entry>Length</entry>

                <entry>Rule</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>F</entry>

                <entry>height</entry>

                <entry>Integer</entry>

                <entry></entry>

                <entry></entry>

                <entry>8848</entry>
              </row>

              <row>
                <entry>F</entry>

                <entry>weight</entry>

                <entry>Integer</entry>

                <entry></entry>

                <entry>0...</entry>

                <entry>1382</entry>
              </row>

              <row>
                <entry>F</entry>

                <entry>id</entry>

                <entry>Integer</entry>

                <entry></entry>

                <entry>5</entry>

                <entry>1...99999</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>

      <section>
        <title>Choice</title>

        <para>The Choice type describes a field that can contain on value out
        of a set of possibly values.</para>

        <table id="examples-for-choice-fields">
          <title>Examples for Choice fields</title>

          <tgroup cols="6">
            <thead>
              <row>
                <entry></entry>

                <entry>Name</entry>

                <entry>Type</entry>

                <entry>Empty</entry>

                <entry>Length</entry>

                <entry>Rule</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>F</entry>

                <entry>color</entry>

                <entry>Choice</entry>

                <entry></entry>

                <entry></entry>

                <entry>red, green, blue</entry>
              </row>

              <row>
                <entry>F</entry>

                <entry>iso_gender</entry>

                <entry>Choice</entry>

                <entry></entry>

                <entry></entry>

                <entry>male, female, unknown, other</entry>
              </row>

              <row>
                <entry>F</entry>

                <entry>department</entry>

                <entry>Choice</entry>

                <entry></entry>

                <entry></entry>

                <entry>accounting, development, sales, shipping</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>

      <section>
        <title>DateTime</title>

        <para>The DateTime type describes a field that can contain a date
        and/or time in a specified format.</para>

        <para>To describe a date, use the following placeolders:</para>

        <itemizedlist>
          <listitem>
            <para>DD: the day (1...31)</para>
          </listitem>

          <listitem>
            <para>MM: the numeric month (1..12)</para>
          </listitem>

          <listitem>
            <para>YYYY: the year including the century (1...9999)</para>
          </listitem>

          <listitem>
            <para>YY: the year without century</para>
          </listitem>
        </itemizedlist>

        <para>To describe a time, use the following placeholders:</para>

        <itemizedlist>
          <listitem>
            <para>hh: hours (0..23)</para>
          </listitem>

          <listitem>
            <para>mm: minutes (0..59)</para>
          </listitem>

          <listitem>
            <para>ss: seconds (0..61). Note that 60 and 61 are valid values
            because of possible leap seconds.</para>
          </listitem>
        </itemizedlist>

        <para>Leading zeros are ignored. Any other characters will be
        interpreted as separators and have to appear in the data as
        specified.</para>

        <table id="examples-for-datetime-fields">
          <title>Examples for DateTime fields</title>

          <tgroup cols="6">
            <thead>
              <row>
                <entry></entry>

                <entry>Name</entry>

                <entry>Type</entry>

                <entry>Empty</entry>

                <entry>Length</entry>

                <entry>Rule</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>F</entry>

                <entry>date_of_birth</entry>

                <entry>DateTime</entry>

                <entry></entry>

                <entry></entry>

                <entry>YYYY-MM-DD</entry>
              </row>

              <row>
                <entry>F</entry>

                <entry>time_of_arrival</entry>

                <entry>DateTime</entry>

                <entry></entry>

                <entry></entry>

                <entry>hh:mm</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>

      <section>
        <title>Pattern</title>

        <para>The Pattern type is similar to the Text type but additionally
        allows to use special characters as placeholders:</para>

        <itemizedlist>
          <listitem>
            <para>"?" mean "exactly 1 character".</para>
          </listitem>

          <listitem>
            <para>"*" means "none or any characters"</para>
          </listitem>
        </itemizedlist>

        <table id="examples-for-pattern-fields">
          <title>Examples for pattern fields</title>

          <tgroup cols="6">
            <thead>
              <row>
                <entry></entry>

                <entry>Name</entry>

                <entry>Type</entry>

                <entry>Empty</entry>

                <entry>Length</entry>

                <entry>Rule</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>F</entry>

                <entry>dos_filename</entry>

                <entry>Pattern</entry>

                <entry></entry>

                <entry>1...12</entry>

                <entry>?*.*</entry>
              </row>

              <row>
                <entry>F</entry>

                <entry>branch_id</entry>

                <entry>Pattern</entry>

                <entry></entry>

                <entry></entry>

                <entry>B???-????-?*</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>

      <section>
        <title>RegEx</title>

        <para>The RegEx type is similar to the Pattern type but allows more
        sophisticated placeholders by describing a regular expression. The
        syntax available is described in the chapter on "Regular expression
        operations" of the Python documentation, available from <ulink
        url="http://docs.python.org/library/re.html">http://docs.python.org/library/re.html</ulink>.</para>

        <table id="examples-for-regex-fields">
          <title>Examples for RegEx fields</title>

          <tgroup cols="6">
            <thead>
              <row>
                <entry></entry>

                <entry>Name</entry>

                <entry>Type</entry>

                <entry>Empty</entry>

                <entry>Length</entry>

                <entry>Rule</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>F</entry>

                <entry>email</entry>

                <entry>RegEx</entry>

                <entry></entry>

                <entry></entry>

                <entry>^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$<footnote>
                    <para>Validate that field value is an amail address as
                    described in "<ulink
                    url="http://www.regular-expressions.info/email.html">how
                    to find or validate an email address</ulink>".</para>
                  </footnote></entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>
    </section>

    <section>
      <title>Describing constraints</title>

      <para>xxx</para>

      <section>
        <title>IsUnique</title>

        <para>TODO: describe</para>
      </section>
    </section>

    <section>
      <title>Using comments</title>

      <para>xxx</para>
    </section>
  </chapter>

  <chapter id="command-line-usage">
    <title>Command line usage</title>

    <para>This chapter describes how to use cutplace from the command line. It
    assumes the user already opened a console window (for example
    <application>Terminal.app</application> on Mac OS X,
    <application>xterm</application> on Linux or
    <application>cmd.exe</application> on Windows) and is ready to enter
    commands in it.</para>

    <section>
      <title>Show help and other information</title>

      <para>To read a short description of all options available for cutplace,
      run:</para>

      <para><userinput>cutplace --help</userinput></para>

      <para>To learn which version of cutplace you are using, run:</para>

      <para><userinput>cutplace --version</userinput></para>

      <para>To obtain information about cutplace's license, run:</para>

      <para><userinput>cutplace --license</userinput></para>
    </section>

    <section id="command-line-validate">
      <title>Validate an ICD</title>

      <para>To validate that an ICD is syntactically and semantically correct,
      simply run cutplace with only the path of the ICD as option. For
      example, an ICD stored in CSV format and named
      <filename>customer_icd.csv</filename> can be validated by
      running:</para>

      <para><userinput>cutplace customer_icd.csv</userinput></para>

      <para>Possible errors show up in the console and result in an exit code
      of 1.</para>

      <para>In case the ICD is in good shape, no error messages appear and the
      exit code is 0.</para>
    </section>

    <section id="command-line-pretty">
      <title>Validate that a data file conforms to an ICD</title>

      <para>To validate that a data file conforms to an ICD, pass the path of
      the ICD and the data file. For example using the same ICD as in the
      previous section to validate a data file containing customers stored in
      customers.csv, run:</para>

      <para><userinput>cutplace customer_icd.csv
      customers.csv</userinput></para>

      <para>To validate several data files against the same ICD, simply pass
      them all. For example:.</para>

      <para><userinput>cutplace customer_icd.csv customers_east.csv
      customers_north.csv customers_south.csv
      customers_west.csv</userinput></para>

      <para>In case the data do not conform to the ICD, error messages show up
      in the console.</para>
    </section>

    <section id="command-line-html">
      <title>Dealing with errors</title>

      <para>Roughly speaking cutplace can encounter the following kinds of
      errors when validating data:</para>

      <itemizedlist>
        <listitem>
          <para>Errors that prevent cutplace from validating the data at all,
          such as non existent data files, insufficient file access rights or
          broken ICD's.</para>
        </listitem>

        <listitem>
          <para>Errors in the data format that prevent it from validating the
          whole file. For example, the ICD might specify a line separator "LF"
          (linefeed) but the data file uses "CRLF" (carriage return and
          linefeed). In such a case, cutplace will stop the validation once it
          encounters the wrong separator.</para>
        </listitem>

        <listitem>
          <para>Errors in the data that violate the rules specified in the ICD
          for fields and constraints. For example, the ICD might specify that
          a field is an integer number but the data file contains letters in
          it. In such a case, cutplace will report the specific line and
          column of the field, and continue with the next one.</para>
        </listitem>
      </itemizedlist>

      <para>xxx</para>
    </section>
  </chapter>

  <chapter id="acknowledgement">
    <title>Acknowledgment</title>

    <para>The following resources have been helpful for developing
    cutplace:</para>

    <itemizedlist>
      <listitem>
        <para>Python.</para>
      </listitem>

      <listitem>
        <para>Lean documentation. TODO: add link</para>
      </listitem>
    </itemizedlist>
  </chapter>

  <chapter id="changes">
    <title>Revision history</title>

    <para>This chapter describes improvements compared to earlier versions of
    cutplace.</para>

    <section id="v0.1.0">
      <title>Version 0.1.x, xx-Mar-2009</title>

      <itemizedlist>
        <listitem>
          <para>Initial release.</para>
        </listitem>
      </itemizedlist>
    </section>
  </chapter>
</book>
